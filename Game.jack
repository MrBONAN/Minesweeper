class Game{
    field Field _gameField;
    field int _fieldWidth, _fieldHeight;
    field MessageBox _messageBox;
    field boolean _winOrLose;
    field int _minesCount;
    field int _flagsCounter;

    static int _s_randomSeed;
    static int _s_randomCount;

	constructor Game new() {
        let _fieldWidth = 16;
        let _fieldHeight = 16;
        let _gameField = Field.new(_fieldWidth, _fieldHeight);
        let _minesCount = _fieldHeight * _fieldWidth / 6;
        let _flagsCounter = 0;
        do PrintRemainingMines();

        do Game.DrawControl();
        do InitializeField(_minesCount); // Количество мин
        let _messageBox = MessageBox.new(22, 10);
        let _winOrLose = false;
		return this;
	}

    method void Run() {
        var boolean exit;
        var char key;
        var Cell firstCell;
        let exit = false;
        do _gameField.Draw();
        let firstCell = _gameField.GetCell(0, 0);
        do firstCell.DrawSelected();

        while (~exit) {
            while (key = 0) { let key = Keyboard.keyPressed();}
            //if (key = 81)  { let exit = true; }     // q key
            let exit = HandleEvents(key) | exit;
            while (~(key = 0)) { let key = Keyboard.keyPressed(); }
        }

        if (_winOrLose) { do _messageBox.DrawWin(); }
        else { do _messageBox.DrawLose(); }
        return;
    }

    method boolean HandleEvents(int key) {
        var boolean exit;
        var Cell cell;
        var int tmp;
        let tmp = 0;
        let exit = false;
        // 87 - W вверх
        // 65 - A влево
        // 83 - S вниз
        // 68 - D вправо
        // 69 - E открыть клетку
        // 81 - Q поставить/убрать флаг с клетки
        if (
        (key = 87) |
        (key = 65) |
        (key = 83) |
        (key = 68) |
        (key = 69) |
        (key = 81)
        ) {
            if (key = 87) { do _gameField.MoveAlongY(-1); }     // up
            if (key = 83) { do _gameField.MoveAlongY(1); }      // down
            if (key = 65) { do _gameField.MoveAlongX(-1); }     // left
            if (key = 68) { do _gameField.MoveAlongX(1); }      // right
            if (key = 69) {                                     // nice (проверка мины)
                let cell = _gameField.GetCurrentCell();
                if ((cell.GetState() = 0) & (cell.GetShow() = false)) {
                    do RevealEmptyCells(_gameField.GetCurX(), _gameField.GetCurY());
                }
                let exit = ~_gameField.CheckCell();
            }
            if (key = 81) {
                let cell = _gameField.GetCurrentCell();
                if (cell.IsFlag()) {
                    let _flagsCounter = _flagsCounter - 1;
                } else {
                    let _flagsCounter = _flagsCounter + 1;
                }
                do PrintRemainingMines();
                do _gameField.SetOrInstallFlag();

            } // устновка/снятие фложка
        }
        if ((~exit) & (_gameField.CheckNumberofOpenCells() = (_fieldHeight * _fieldWidth - _minesCount))) { 
            let _winOrLose = true;
            let exit = true;
        }

        return exit;
    }

    method void InitializeField(int mineCount) {
        do CreateMines(mineCount);
        do CalculateNumbers();
        return;
    }

    method void CalculateNumbers() {
        var int x, y;
        var int count;
        var Cell cell;
        let x = 0;
        while (x < _fieldWidth) {
            let y = 0;
            while (y < _fieldHeight) {
                let cell = _gameField.GetCell(x, y);
                if (~cell.IsMine()) {
                    do cell.SetState(CalculateMinesAround(x, y));
                }
                let y = y + 1;
            }
            let x = x + 1;
        }
        return;
    }

    method int CalculateMinesAround(int x, int y) {
        var int dx, dy;
        var int tx, ty;
        var int count;
        var Cell cell;
        let count = 0;
        let dx = -1;
        while (dx < 2) {
            let dy = -1;
            while (dy < 2) {
                let tx = x + dx;
                let ty = y + dy;
                if ((tx > -1) & (tx < _fieldWidth) &
                    (ty > -1) & (ty < _fieldHeight)) {
                    let cell = _gameField.GetCell(tx, ty);
                    if (cell.IsMine()) {
                        let count = count + 1;
                    }
                }
                let dy = dy + 1;
            }
            let dx = dx + 1;
        }

        return count;
    }

    method void CreateMines(int mineCount) {
        var int x, y;
        var int currCount;
        var Cell cell;

        let currCount = 0;
        while (currCount < mineCount) {
            let x = Game.Mod(Random.GetRandomNumber(), _fieldWidth);
            let y = Game.Mod(Random.GetRandomNumber(), _fieldHeight);
            let cell = _gameField.GetCell(x, y);
            if (~cell.IsMine()) {
                do cell.SetMine();
                let currCount = currCount + 1;
            }
        }

        return;
    }

    method void RevealEmptyCells(int x, int y) {
        var int dx, dy;
        var int tx, ty;
        var Cell cell;
        let dx = -1;
        while (dx < 2) {
            let dy = -1;
            while (dy < 2) {
                let tx = x + dx;
                let ty = y + dy;
                if ((tx > -1) & (tx < _fieldWidth) &
                    (ty > -1) & (ty < _fieldHeight)) {
                    let cell = _gameField.GetCell(tx, ty);
                    if (cell.GetState() = 0) { // пустая клетка
                        if (~(cell.GetShow())) {
                            do cell.Open();
                            do RevealEmptyCells(tx, ty);
                        }
                    }
                    do cell.Open();
                }
                let dy = dy + 1;
            }
            let dx = dx + 1;
        }

        return;
    }

    function int Mod(int number, int mod) {
        var int tmp;
        let tmp = number / mod;
        if (number < 0) {
            let tmp = tmp - 1;
        }
        let tmp = number - (tmp * mod);
        if (tmp = mod) {
            let tmp = 0;
        }
        return tmp;
    }

    function void DrawControl() {
        var int x, y;
        let y = 40;
        let x = 6;
        do Output.moveCursor(x, y);
        do Output.printString("Select cell - WASD");
        do Output.moveCursor(x+1, y);
        do Output.printString("Open - E");
        do Output.moveCursor(x+2, y);
        do Output.printString("Set/reset flag - Q");
        return;
    }

    method void PrintRemainingMines() {
        var int x, y;
        let y = 40;
        let x = 11;
        do Output.moveCursor(x, y);
        do Output.printString("                     ");
        do Output.moveCursor(x, y);
        do Output.printString("Mines remaining: ");
        do Output.printInt(_minesCount - _flagsCounter);
        return;
    }
}
    
    
