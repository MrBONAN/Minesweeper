class Game{
    field Field _gameField;
    field int _fieldWidth, _fieldHeight;
    field MessageBox _messageBox;
    field boolean _winOrLose;

    static int _s_randomSeed;
    static int _s_randomCount;

	constructor Game new() {
        let _fieldWidth = 16;
        let _fieldHeight = 16;
        let _gameField = Field.new(_fieldWidth, _fieldHeight);
        do InitializeField(_fieldHeight * _fieldWidth / 6); // Количество мин
        let _messageBox = MessageBox.new(1, 1, 10);
        let _winOrLose = false;
		return this;
	}

    method void Run() {
        var boolean exit;
        var char key;
        let exit = false;
        do _gameField.Draw();

        while (~exit) {
            while (key = 0) { let key = Keyboard.keyPressed();}
            //if (key = 81)  { let exit = true; }     // q key
            let exit = HandleEvents(key) | exit;
            while (~(key = 0)) { let key = Keyboard.keyPressed(); }
        }

        if (_winOrLose) { do _messageBox.DrawWin(10); }
        else { do _messageBox.DrawLose(10); }
        return;
    }

    method boolean HandleEvents(int key) {
        var boolean wasMine;
        let wasMine = false;
        // 87 - W вверх
        // 65 - A влево
        // 83 - S вниз
        // 68 - D вправо
        // 69 - E открыть клетку
        // 81 - Q поставить/убрать флаг с клетки
        if (
        (key = 87) |
        (key = 65) |
        (key = 83) |
        (key = 68) |
        (key = 69) |
        (key = 81)
        ) {
            if (key = 87) { do _gameField.MoveAlongY(-1); }     // up
            if (key = 83) { do _gameField.MoveAlongY(1); }      // down
            if (key = 65) { do _gameField.MoveAlongX(-1); }     // left
            if (key = 68) { do _gameField.MoveAlongX(1); }      // right
            if (key = 69) {                                     // nice (проверка мины)
                let wasMine = ~_gameField.CheckCell();
                if ((~wasMine) & (_gameField.CheckNumberofOpenCells() = 256)) { 
                    let _winOrLose = true;
                    let wasMine = true;
                }
            }
            if (key = 81) { do _gameField.SetOrInstallFlag(); } // устновка/снятие фложка
        }

        return wasMine;
    }

    method void InitializeField(int mineCount) {
        do CreateMines(mineCount);

        return;
    }

    method void CreateMines(int mineCount) {
        var int x, y;
        var int currCount;
        var Cell cell;

        let currCount = 0;
        while (currCount < mineCount) {
            let x = Game.Mod(Random.GetRandomNumer(), _fieldWidth);
            let y = Game.Mod(Random.GetRandomNumer(), _fieldHeight);
            let cell = _gameField.GetCell(x, y);
            if (~cell.IsMine()) {
                do cell.SetMine();
                let currCount = currCount + 1;
            }
        }

        return;
    }

    function int Mod(int number, int mod) {
        var int tmp;
        let tmp = number / mod;
        if (number < 0) {
            let tmp = tmp - 1;
        }
        let tmp = number - (tmp * mod);
        if (tmp = mod) {
            let tmp = 0;
        }
        return tmp;
    }
}
    
    
