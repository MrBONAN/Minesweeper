class Field{

    field int _curX, _curY;
    field int _width, _height;
    field Array _gameField;
    field int numberOfOpenCells;

    constructor Field new(int width, int height) {
        let _curX = 0;
		let _curY = 0;
        let _width = width;
        let _height = height;
        let numberOfOpenCells = 0;
        do GenerateField();
		return this;
	}

    method void GenerateField() {
        var int i;
        var int j;
        var Array line;
        let _gameField = Array.new(_width);
        let i = 0;
        while (i < _width) {
            let _gameField[i] = Array.new(_height);
            let line = _gameField[i];
            let j = 0;
            while (j < _height){
                let line[j] = Cell.new(i, j);
                let j = j + 1;
            }
            let i = i + 1;
        }
		return;
	}

    method void MoveAlongX(int change) // change = 1 - сдвиг вправо, change = -1 - сдвиг влево
    {
        do SelectCell(change, 0); // 0 - изменение по оси X
        return;
    }

    method void MoveAlongY(int change) // change = 1 - сдвиг вверх, change = -1 - сдвиг вниз
    {
        do SelectCell(change, 1); // 1 - изменение по оси Y
        return;
    }

    method void SelectCell(int change, int coordinate)
    {
        var Array line;
        var Cell cell;
        let line = _gameField[_curX];
        let cell = line[_curY];
        do cell.CancelSelection();
        if (coordinate = 0) {
            let _curX = _curX + change;
            if (_curX < 0) {
                let _curX = 0;
            }
            if (_curX > (_width - 1)) {
                let _curX = _width - 1;
            }
        }
        else {
            let _curY = _curY + change;
            if (_curY < 0) {
                let _curY = 0;
            }
            if (_curY > (_height - 1)) {
                let _curY = (_height - 1);
            }
        }
        let line = _gameField[_curX];
        let cell = line[_curY];
        do cell.Select();
        return;
    }

    method boolean CheckCell(){
        var Cell cell;
        var Array line;
        var boolean result;
        let line = _gameField[_curX]; 
        let cell = line[_curY];
        let result = cell.Open();
        let numberOfOpenCells = numberOfOpenCells + 1;
        return result;
    }

    method Cell GetCurrentCell() {
        var Array line;
        let line = _gameField[_curX]; 
        return line[_curY];
    }

    method int GetCurX() {
        return _curX;
    }

    method int GetCurY() {
        return _curY;
    }

    method void SetCellState(int x, int y, int state) {
        var Cell cell;
        var Array line;
        let line = _gameField[x];
        let cell = line[y];
        do cell.SetState(state);
        return;
    }

    method int GetCellState(int x, int y) {
        var Array line;
        var Cell cell;
        let line = _gameField[x];
        let cell = line[y];
        return cell.GetState();
    }

    method Cell GetCell(int x, int y) {
        var Array line;
        let line = _gameField[x];
        return line[y];
    }

    method int CheckNumberofOpenCells(){
        return numberOfOpenCells;
    }

    method void SetOrInstallFlag(){
        var Cell cell;
        var Array line;
        let line = _gameField[_curX]; 
        let cell = line[_curY];
        do cell.ChangeFlagState();
        return;
    }

    method void Draw()
    {
        var int i;
        var int j;
        var Array line;
        var Cell cell;
        let i = 0;
        while (i < _width) {
            let line = _gameField[i];
            let j = 0;
            while (j < _height){
                let cell = line[j];
                //do cell.SetShow(true);

                do cell.Draw();
                let j = j + 1;
            }
            let i = i + 1;
        }
        return;
    }
}