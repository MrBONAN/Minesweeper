Game {
    Методы {
        run - запуск игры
        CheckEvents - метод чисто на проверку нажатия клавишь и вызова нужных функция (чтобы разбить
                        длинный блок run, а то там циклов много, в глаза просается)
    }

    Поля {
        // Возможно тут даже поля то не нужны да и весь класс (можно тупо сделать их переменными в методе run)
        Field _gameField

    }
}

Field {
    Методы {
        GenerateField
        MoveAlongX (аналогично по оси Y) - для выбора клетки на поле
        CheckCeil - проверка клетки (возвращаем значение - типа успех/мина)
        Draw - пробег по всему полю и вызов метода Draw у клеток
    }
    Поля {
        Array _gameField (массив массивов. Их МОЖНО делать (я сам делал). Если возникнут проблемы, напишите)
        int _x, _y (хз, возможно не понадобятся)
        int _curX, _curY (коориданты выбранной клетки. Как вариант, если _x и _y не были использованы, то юзать их)
    }
}

Ceil {
    Методы {
        new(x, y, startX, startY) - startX и Y будут координаты левого верхнего угла игрового поля
        Draw {
            нарисовать несколько состояний (на каждое по отдельной функции) {
                выбранная (думаю, тут можно тупо заштриховать её типа шахматным полем)
                Закрытая
                Пустая
                С флагом
                С цифрами (от 1 до 8)
                P.S. ссылка на github с кодом для генерации картинки (просто открыть файл hrml в браузере)
                https://github.com/ErikUmble/JackBitmapEditor
            }
        }
        SetState - Сохраняет состояние кнопки (пустая, с миной, )
        GetState - Получение состояния (например в методе CheckCeil класса Field)
        Show - (изначале поле с таким же именем = false, значит мы в ОТРИСОВКЕ рисуем клетку закрытой, тут мы задаём
                show = true и вызываем Draw)
    }
    Поля {
        (типы полей писал +-, на своё усмотрение поменять)
        int _state
        boolean _show
        int _x, _y (эти координаты относительно начала поля (см. констурктор))
    }
}

// про эти классы пока не думал особо, их в последнюю очередь, думаю, реализуем
MessageBox {
    Методы {
        new (x, y, size)
        Draw (message) {
            Отрисовка самого окна и вызов PrintMessage
        }
        PrintMessage (message)
    }
    Поля {
        int _x, _y (хз, может надо)
        Button _btn - кнопка подтверждения
    }
}

Button {
    Методы {
        new()
        Draw (text) { // Возможно text и не нужен, в конструкторе тупо тексст задать
            Отрисовка и вызов PrintText
        }
        PrintText(text)
    }
    Поля {
        String text  возможно не надо
        Ну и поля на усмотрение
    }
}